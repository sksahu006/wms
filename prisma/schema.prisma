// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  STAFF
  CUSTOMER
}

enum Status {
  PENDING
  ACTIVE
  INACTIVE
}

enum SpaceStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum SpaceType {
  REGULAR
  COLD
  HAZARDOUS
  OUTDOOR
}

enum InvoiceStatus {
  PAID
  PENDING
  OVERDUE
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(CUSTOMER)
  status        Status    @default(PENDING)
  created       DateTime  @default(now())

  companyName     String?
  contactName     String?
  position        String?
  phone           String?
  address         String?
  businessType    String?
  taxId           String?
  requirements    String?
  businessLicense String?
  taxCertificate  String?

  accounts   Account[]
  sessions   Session[]
  warehouses Warehouse[]
  agreements Agreement[]
  spaces     Space[]
  invoices   Invoice[]   @relation("InvoiceClient")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Warehouse {
  id          String   @id @default(cuid())
  code        String
  name        String
  location    String
  storageType String
  capacity    Int
  managerId   String
  createdAt   DateTime @default(now())

  manager User    @relation(fields: [managerId], references: [id])
  spaces  Space[]
}

model Space {
  id          String      @id @default(cuid())
  warehouseId String
  spaceCode   String      @unique
  name        String?
  type        SpaceType   @default(REGULAR)
  size        Float // in sq ft
  height      Float? // in feet
  location    String?
  rate        Float? // monthly rate
  description String?
  status      SpaceStatus @default(AVAILABLE)
  features    String[]
  images      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  warehouse  Warehouse   @relation(fields: [warehouseId], references: [id])
  client     User?       @relation(fields: [clientId], references: [id])
  clientId   String?
  agreements Agreement[]
  invoices   Invoice[]   @relation("InvoiceSpace")
}

model Agreement {
  id                    String    @id @default(cuid())
  spaceId               String
  userId                String
  clientName            String?
  contactPerson         String
  spaceType             SpaceType // Stored from Space.type
  areaSqft              Float // Stored from Space.size
  monthlyRatePerSqft    Float? // Stored from Space.rate divided by Space.size
  monthlyRentAmount     Float // Stored from Space.rate
  handoverDate          DateTime?
  rentStartDate         DateTime
  rateEscalationDate    DateTime?
  rateEscalationPercent Float? // Percentage, e.g., 5.0 for 5%
  agreementPeriod       Int? // In months
  electricityCharges    Float? // Monthly charges
  waterCharges          Float? // Monthly charges
  remarks               String?
  status                Status    @default(PENDING)
  createdAt             DateTime  @default(now())

  space Space @relation(fields: [spaceId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  clientId      String
  spaceId       String
  date          DateTime      @default(now())
  amount        Float
  tax           Float
  totalAmount   Float
  dueDate       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        InvoiceStatus @default(PENDING)
  client        User          @relation("InvoiceClient", fields: [clientId], references: [id])
  space         Space         @relation("InvoiceSpace", fields: [spaceId], references: [id])
}