// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  STAFF
  CUSTOMER
}

enum Status {
  PENDING
  ACTIVE
  INACTIVE
}

enum SpaceStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum SpaceType {
  REGULAR
  COLD
  HAZARDOUS
  OUTDOOR
  AMENITY
  CARPET
  UTILITY
}

enum InvoiceStatus {
  PAID
  PENDING
  OVERDUE
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(CUSTOMER)
  status        Status    @default(PENDING)
  created       DateTime  @default(now())

  companyName     String?
  contactName     String?
  position        String?
  phone           String?
  address         String?
  businessType    String?
  taxId           String?
  requirements    String?
  businessLicense String?
  taxCertificate  String?
  openingBalance  Int?    @default(0)
  billedAmount    Int?    @default(0)
  receivedAmount  Int?    @default(0)
  balanceAmount   Int?    @default(0)

  accounts   Account[]
  sessions   Session[]
  warehouses Warehouse[]
  agreements Agreement[]
  spaces     Space[]
  invoices   Invoice[]    @relation("InvoiceClient")
  supports   Support[]
  ResetToken ResetToken[]
  isDeleted  Boolean?     @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Warehouse {
  id          String   @id @default(cuid())
  code        String
  name        String
  location    String
  storageType String
  capacity    Int
  managerId   String
  createdAt   DateTime @default(now())
  isDeleted   Boolean? @default(false)

  manager User    @relation(fields: [managerId], references: [id])
  spaces  Space[]
}

model Space {
  id          String      @id @default(cuid())
  warehouseId String
  spaceCode   String      @unique
  name        String?
  type        SpaceType   @default(REGULAR)
  size        Float // in sq ft
  height      Float? // in feet
  location    String?
  rate        Float? // monthly rate
  description String?
  status      SpaceStatus @default(AVAILABLE)
  features    String[]
  images      String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isDeleted   Boolean?    @default(false)

  warehouse  Warehouse   @relation(fields: [warehouseId], references: [id])
  client     User?       @relation(fields: [clientId], references: [id])
  clientId   String?
  agreements Agreement[]
  invoices   Invoice[]   @relation("InvoiceSpace")
  supports   Support[]
}

model Agreement {
  id      String @id @default(cuid())
  spaceId String
  userId  String

  clientName            String?
  contactPerson         String
  spaceType             SpaceType
  areaSqft              Float
  monthlyRatePerSqft    Float?
  monthlyRentAmount     Float
  handoverDate          DateTime?
  rentStartDate         DateTime
  rateEscalationDate    DateTime?
  rateEscalationPercent Float?
  agreementPeriod       Int?
  electricityCharges    Float?
  waterCharges          Float?
  remarks               String?
  status                Status    @default(PENDING)
  documentUrl           String?
  createdAt             DateTime  @default(now())
  isDeleted             Boolean?  @default(false)

  space    Space     @relation(fields: [spaceId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
  invoices Invoice[] @relation("AgreementToInvoice")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  agreementId   String?
  clientId      String
  spaceId       String
  date          DateTime      @default(now())
  amount        Float
  tax           Float
  totalAmount   Float
  dueDate       DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        InvoiceStatus @default(PENDING)
  documentUrl   String?
  isDeleted     Boolean?      @default(false)
  tds           Float?           @default(0)

  client    User       @relation("InvoiceClient", fields: [clientId], references: [id])
  space     Space      @relation("InvoiceSpace", fields: [spaceId], references: [id])
  agreement Agreement? @relation("AgreementToInvoice", fields: [agreementId], references: [id])
}

model Support {
  id        String        @id @default(cuid())
  subject   String
  message   String
  status    SupportStatus @default(OPEN)
  category  String
  priority  String
  spaceId   String?
  document  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  isDeleted Boolean?      @default(false)

  clientId String
  client   User   @relation(fields: [clientId], references: [id])
  space    Space? @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model ResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
